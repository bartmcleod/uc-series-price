<?php
/**
 * @param $entity
 * @throws Exception
 */
function uc_series_price_uc_cart_item_presave($entity)
{
    // is it a series_cost node? It may not be added on its own
    $isSeriesCost = uc_series_price_is_series_cost($entity);

    if ($isSeriesCost) {
        // check if series product is in the cart
        $nid = $entity->nid;
        $seriesNid = uc_series_price_get_series_nid($nid);
        $cartItems = uc_cart_get_contents();

        if(0 === count($cartItems)){
            throw new \Exception('The series cost may only be added when the series product is in the cart
            , but the cart is empty.');
        }

        $cartItemIds = array();

        foreach ($cartItems as $cartItem) {
            // different cart item already has the same series cost, not allowed!
            $cartItemisNewOrDifferent = $entity->is_new || $cartItem->cart_item_id !== $entity->cart_item_id;
            if (
                $nid == $cartItem->nid
                && $cartItemisNewOrDifferent
                && 0 != $cartItem->qty // @todo: needed?
            ) {
                throw new Exception("The series cost for node $seriesNid are already in the cart");
            }

            $cartItemIds[$cartItem->cart_item_id] = $cartItem->nid;
        }

        if (!in_array($seriesNid, $cartItemIds)) {
            // not present in cart
            throw new Exception('The series cost may only be added when the series product is in the cart');
        }

        $entity->qty = 1;
        return;
    }
}

/**
 * Implements hook_uc_cart_item_insert().
 */
function uc_series_price_uc_cart_item_insert($entity)
{
    uc_series_price_check_if_series_cost_must_be_added($entity);
}

/**
 * Implements hook_uc_cart_item_insert().
 */
function uc_series_price_uc_cart_item_update($entity)
{
    uc_series_price_check_if_series_cost_must_be_added($entity);
}

function uc_series_price_check_if_series_cost_must_be_added($entity) {
    $data = $entity->data;

    // is it a series node?
    $itIsNotASeries = !isset($data['type']) || 'ucsp_series' !== $data['type'];

    if ($itIsNotASeries) {
        return;
    }

    $nid = $entity->nid;
    uc_series_price_add_series_cost($nid);
}

/**
 * Use this to figure out if an entity represents series cost (setup cost) for a series.
 *
 * @param $entity
 * @return bool
 */
function uc_series_price_is_series_cost($entity)
{
    $node = node_load($entity->nid);
    return 'ucsp_series_cost' === $node->type;
}

/**
 * Use this to figure out if an entity represents a series product.
 *
 * @param int $nid
 * @return bool
 */
function uc_series_price_is_series($nid)
{
    $node = node_load($nid);
    return 'ucsp_series' === $node->type;
}

/**
 * Implements hook_uc_cart_item_delete().
 * @param Entity $entity
 */
function uc_series_price_uc_cart_item_delete($entity)
{
    // 1. If a series was removed, you should also remove series cost
    $nid1 = $entity->nid;

    if (uc_series_price_is_series($nid1)) {
        uc_series_price_remove_series_cost($entity->nid);
        return;
    }

    // 2. check everything that is left in the cart, should a series cost be re-added somewhere?
    // this will occur if two series of the same type were in the cart or if series costs were removed by the user
    $cartItems = uc_cart_get_contents();

    foreach($cartItems as $cartItem){
        $nid = $cartItem->nid;

        if (!uc_series_price_is_series($nid)) {
            continue;
        }

        uc_series_price_add_series_cost($nid);
    }
}

/**
 * Removes series cost for the given series node id, if the series is not present in the cart.
 * @param $nid
 */
function uc_series_price_remove_series_cost($nid)
{
    $seriesCostProductId = uc_series_price_get_series_cost_nid($nid);

    if (false === $seriesCostProductId) {
        return;
    }

    // 2. Find any cart items with this $seriesCostProductId, if there is one, it must be removed
    $cartItems = uc_cart_get_contents();

    foreach($cartItems as $cartItem){
        if ($seriesCostProductId == $cartItem->nid) {
            // it must be removed
            $args = ['cart_item_id' => $cartItem->cart_item_id];
            db_delete('uc_cart_products')
                ->where('cart_item_id = :cart_item_id', $args)
                ->execute();
        }
    }
}


/**
 * Adds series cost for the given series node id, if not already present in the cart.
 * @param $nid The node id of the series product, for which the cost should be added
 */
function uc_series_price_add_series_cost($nid)
{
    $seriesCostProductId = uc_series_price_get_series_cost_nid($nid);

    if (false === $seriesCostProductId) {
        return;
    }

    // 2. Find any cart items with this $seriesCostProductId, if there is none, one must be added
    $cartItems = uc_cart_get_contents();

    foreach($cartItems as $cartItem){
        if ($seriesCostProductId == $cartItem->nid && 0 != $cartItem->qty) {
            return;
        }
    }

    // add it
    uc_cart_add_item($seriesCostProductId, 1);
}

/**
 * Finds the node id for the series cost based on the $nid of the series.
 *
 * @param $nid series node id
 * @return bool|int
 */
function uc_series_price_get_series_cost_nid($nid){
    // 1. see if there is a series_cost_product_id field for the product and what its value is
    $query = "SELECT 
            ucsp_series_cost_product_id_value 
        FROM
            field_data_ucsp_series_cost_product_id
        WHERE
            entity_id = :nid LIMIT 1";

    /** @var DatabaseStatementInterface $stmt */
    $stmt = db_query($query, array('nid' => (int) $nid));
    $result = $stmt->fetchAssoc();

    if (!$result) {
        // nothing to do here, no series cost product id entered ( @todo which is an error an should probably be logged)
        return false;
    }

    $seriesCostProductId = (int) $result['ucsp_series_cost_product_id_value'];
    return $seriesCostProductId;
}


/**
 * Finds the node id for the series based on the $nid of the series cost.
 *
 * @param $nid series cost node id
 * @return bool|int
 */
function uc_series_price_get_series_nid($nid){
    // 1. select the entity id based on the value of the ucsp_series_cost_product_id_value, which points to the series cost
    $query = "SELECT 
            entity_id 
        FROM
            field_data_ucsp_series_cost_product_id
        WHERE
            ucsp_series_cost_product_id_value = :nid LIMIT 1";

    /** @var DatabaseStatementInterface $stmt */
    $stmt = db_query($query, array('nid' => (int) $nid));
    $result = $stmt->fetchAssoc();

    if (!$result) {
        // nothing to do here, no series cost product id entered ( @todo which is an error an should probably be logged)
        return false;
    }

    $seriesProductId = (int) $result['entity_id'];
    return $seriesProductId;
}

